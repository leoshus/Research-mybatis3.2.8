在JAVA中有两类事务，JDBC事务和JTA(Java Transaction API)事务，一般J2EE服务器支持三种类型的事务管理。即：JDBC事务，JTA事务，容器管理事务。如果是JDBC类型的事务，则是由Connection类来控制的。如果创建一个Connection对象时，没有显示调用
setTransactionIsolation(int level) 方法，则Connection使用当前数据库默认的事务隔离级别，数据库的默认事务隔离级别可以通过相应的SQL语句进行查询，例如在Mysql数据库下可使用 select @@tx_isolation;语句查看当前数据库的事务隔离级别。
JDBC的Connection类针对事务的隔离性定义了五个隔离级别。
Connection.TRANSACTION_NONE
Connection.TRANSACTION_READ_COMMITTED
Connection.TRANSACTION_READ_UNCOMMITTED
Connection.TRANSACTION_REPEATABLE_READ
Connection.TRANSACTION_SERIALIZABLE
在mybatis中，有一个事务管理器的配置，其中type属性可以配置事务的类型，提供了JDBC或MANAGED的配置属性，这就说明在mybatis中事务的管理方式有两个事务管理器的实现，都是针对JDBC事务的事务管理器（非JTA事务），分别是：
  org.apache.ibatis.transaction.jdbc.JdbcTransaction
  org.apache.ibatis.transaction.managed.ManagedTransaction
这两个类都实现了org.apache.ibatis.transaction.Transaction接口，Transaction接口定义了如下方法：
  Connection getConnection() throws SQLException;
   void commit() throws SQLException;
   void rollback() throws SQLException;
   void close() throws SQLException;
通过这些方法可以看出这个接口实际是对Connection类进行了包装，包括了Connection的创建、提交、回滚、关闭动作。并且,其中ManagedTransaction类的commit方法和
rollback方法中没有做任何事，也就是说这个类是不控制事务的提交和回滚的，而交由外部容器去管理事务的提交与回滚，外部容器(可以是Spring 容器或EJB容器)通过声明式事务的方式进行管事。

在mybatis中，通过一个Enum类org.apache.ibatis.session.TransactionIsolationLevel来定义了事务的隔离级别：
public enum TransactionIsolationLevel {
  NONE(Connection.TRANSACTION_NONE),
  READ_COMMITTED(Connection.TRANSACTION_READ_COMMITTED),
  READ_UNCOMMITTED(Connection.TRANSACTION_READ_UNCOMMITTED),
  REPEATABLE_READ(Connection.TRANSACTION_REPEATABLE_READ),
  SERIALIZABLE(Connection.TRANSACTION_SERIALIZABLE);

  private final int level;

  private TransactionIsolationLevel(int level) {
    this.level = level;
  }

  public int getLevel() {
    return level;
  }
}

TransactionIsolationLevel类中定义的事务隔离级别其实就是引用了Connection类中的事务隔离级别，下面分别对这几种隔离级别进行说明： 
TRANSACTION_NONE：表示不支持事务的常量
TRANSACTION_READ_UNCOMMITTED：表示可以发生脏读 (dirty read)、不可重复读和虚读 (phantom read) 的常量
TRANSACTION_READ_COMMITTED：不可重复读和虚读可以发生
TRANSACTION_REPEATABLE_READ：虚读可以发生
TRANSACTION_SERIALIZABLE：指示不可以发生脏读、不可重复读和虚读的常量。
脏读：如果一个事务对数据进行了更新，但事务还没有提交，另一个事务就可以“看到”该事务没有提交的更新结果。这样造成的问题是，如果第一个事务回滚，那么第二个事务在此之前所“看到”的数据就是一笔脏数据。
不可重复读：指同个事务在整个事务过程中对同一笔数据进行读取，每次读取结果都不同。如果事务1在事务2的更新操作之前读取一次数据，在事务2的更新操作之后再读取同一笔数据一次，两次结果是不同的。所以TRANSACTION_READ_COMMITTED是无法避免不可重复读和虚读。
幻读：指同样一个查询在整个事务过程中多次执行后，查询所得的结果集是不一样的。幻读针对的是多笔记录。

Serializable(串行化)：一个事务在执行过程中完全看不到其他事务对数据库所做的更新。
Repeatable Read(可重复读)：一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。
Read Commited（读已提交数据）：一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，而且能看到其他事务已经提交的对已有记录的更新
Read Uncomitted（读未提交数据）：一个事务在执行过程中可以看到其他事务没有提交的新插入的记录，而且能看到其他事务没有提交的对已有记录的更新。
　　当数据库系统采用read Commited隔离级别时，会导致不可重复读喝第二类丢失更新的并发问题，可以在应用程序中采用悲观锁或乐观锁来避免这类问题。从应用程序的角度，锁可以分为以下几类：
　　A.悲观锁：指在应用程序中显示的为数据资源加锁。尽管能防止丢失更新和不可重复读这类并发问题，但是它会影响并发性能，因此应该谨慎地使用。 
　　B.乐观锁：乐观锁假定当前事务操作数据资源时，不回有其他事务同时访问该数据资源，因此完全依靠数据库的隔离级别来自动管理锁的工作。应用程序采用版本控制手段来避免可能出现的并发问题。
五、悲观锁有两种实现方式。
　　A.在应用程序中显示指定采用数据库系统的独占所来锁定数据资源。SQL语句：select ... for update，在Hibernate中使用get，load时如session.get(Account.class,new Long(1),LockMode,UPGRADE) 
　　B.在数据库表中增加一个表明记录状态的LOCK字段，当它取值为“Y”时，表示该记录已经被某个事务锁定，如果为“N”，表明该记录处于空闲状态，事务可以访问它。增加锁标记字段就可以实现。
　　利用Hibernate的版本控制来实现乐观锁
　　乐观锁是由程序提供的一种机制，这种机制既能保证多个事务并发访问数据，又能防止第二类丢失更新问题。
　　在应用程序中可以利用Hibernate提供的版本控制功能来视线乐观锁，OR映射文件中的<version>元素和<timestamp>都具有版本控制的功能，一般推荐采用<version>



mybatis只是对JDBC事务提供了事务管理器的封装，如果想在mybatis中使用JTA事务，需要我们自行实现org.apache.ibatis.transaction.Transaction接口，对此Spring框架提供了解决方案，可能通过mybatis+spring+atomikos的整合来完成。或者采用EJB容器也可以提供JTA事务的支持


JTA 事务
JTA事务比JDBC事务更强大。一个JTA事务可以有多个参与者，而一个JDBC事务则被限定在一个单一的数据库连接。下列任一个Java平台的组件都可以参与到一个JTA事务中：
.JDBC连接
.JDO PersistenceManager 对象
.JMS 队列
.JMS 主题
.企业JavaBeans（EJB）
.一个用J2EE Connector Architecture 规范编译的资源分配器。
要用JTA来划分一个事务，应用程序调用javax.transaction.UserTransaction接口中的方法。
InitialContext ctx = new InitialContext();
Object txObj = ctx.lookup("java:comp/UserTransaction";);
UserTransaction utx = (UserTransaction) txObj;
DataSource ds = obtainXADataSource()；
Connection conn = ds.getConnection()；
。。。
utx.commit()；
如果计划使用JTA来划分事务，需要一个实现了javax.sql.XADataSource，javax.sql.XAConnection和javax.sql.XAResource接口JDBC的驱动，（如果在weblogic或者webshere中建立过datasource的朋友对XA应该比较熟悉。）XA连接是一个JTA事务中的参与者。使用了XA连接的应用程序不必调用java.sql.Connection.commit()或java.sql.Connection.rollback()。而应该使用UserTransaction.begin()、UserTransaction.commit()和UserTransaction.rollback().
下面的例子可能更有些：
    InitialContext ic = new InitialContext();
Object txObj = ic .lookup("java:comp/UserTransaction";);
UserTransaction ut = (UserTransaction) txObj;
ut.begin();
DataSource db1 = (DataSource) ic.lookup("java:comp/env/OrdersDB");
DataSource db2 = (DataSource) ic.lookup("java:comp/env/InventoryDB");
Connection con1 = db1.getConnection();
Connection con2 = db2.getConnection();
// perform updates to OrdersDB using connection con1
// perform updates to InventoryDB using connection con2
ut.commit();