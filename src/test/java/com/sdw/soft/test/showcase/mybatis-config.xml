<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 注意:每个标签的书写顺序否则DTD会报错 (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, 
 objectWrapperFactory?, plugins?, environments?, databaseIdProvider?, mappers?) -->
<configuration>
 	<!-- 属性配置  相同属性优先级顺序为：作为方法参数的properties > 资源/url中的properties > properties元素的子元素<property> -->
	<properties resource="com/sdw/soft/test/showcase/config.properties">
		<!-- <property name="username" value="sa"/>
		<property name="password" value="sa"/> -->
	</properties>
	
	<!-- 设置缓存和延迟加载等等运行时的行为方式 -->
	<settings>
		<!-- 设置超时时间，他决定驱动等待一个数据库响应时间 -->
		<setting name="defaultStatementTimeout" value="25000"/>
		<!-- 全局的映射器启用/禁用缓存 -->
		<setting name="cacheEnabled" value="true"/>
		<!-- 全局启用/禁用延迟加载 禁用时，所有关联对象都会即时加载 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。 -->
		<setting name="lazyLoadingEnabled" value="false"/>
		<!-- 启用时，带延迟加载属性的对象的加载与否完全取决于对任意延迟属性的调用 反之 每种属性将会按需加载 -->
		<setting name="aggressiveLazyLoading" value="true"/>
		<!-- 是否允许单一语句返回多结果集 (需要兼容驱动) -->
		<setting name="multipleResultSetsEnabled" value="true"/>
		<!-- 使用列标签代替列名。不同的驱动在这方面有不同的表现 具体可以参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果 -->
		<setting name="useColumnLabel" value="true"/>
		<!-- 允许JDBC支持自动生成主键，需要驱动兼容。如果设置为true则这个设置强制使用自动生成主键，尽管一些驱动不兼容但仍能正常工作(如Derby) -->
		<setting name="useGeneratedKeys" value="false"/>
		<!-- 指定MyBatis是否以及如何自动映射指定的列到字段或属性。
		NONE表示取消自动映射；
		PARTIAL只会自动映射没有定义嵌套结果集映射的结果集。
		FULL会自动映射任意复杂的结果集(包括嵌套和其他情况) -->
		<setting name="autoMappingBehavior" value="PARTIAL"/>
		<!-- 配置默认的执行器。
		    SIMPLE就是普通的执行器；
		    REUSE执行器会重用预处理语句(PreparedStatements)
		    BATCH执行器将重用语句并执行批量更新 -->
		<setting name="defaultExecutorType" value="SIMPLE"/>
		
	</settings>
	<!-- 别名 -->
	<typeAliases>
		<!-- <typeAlias type="" alias=""/> -->
	</typeAliases>	
	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC"/>
			<!-- type分三种：
			     UNPOOLED:每次被请求时简单打开和关闭连接 
			     POOLED:实现池的概念将JDBC连接对象组织起来
			     JNDI:为了能在EJB或应用服务器-->
			<dataSource type="POOLED">
				<property name="driver" value="${driver}"/>
				<property name="url" value="${url}"/>
				<property name="username" value="${username}"/>
				<property name="password" value="${password}"/>
			</dataSource>
		</environment>
	</environments>

	<mappers>
		<mapper resource="com/sdw/soft/test/showcase/user.xml"/>
	</mappers>
</configuration>